openapi: 3.0.0
info:
  title: Sample API
  version: 0.0.0
tags:
  - name: User
  - name: Review
paths:
  /me:
    get:
      tags:
        - User
      responses:
        "200":
          $ref: "#/components/responses/Me"
        "401":
          description: ""

  /reviews:
    get:
      tags:
        - Review
      parameters:
        - $ref: "#/components/parameters/ReviewListQuery"
      responses:
        "200":
          $ref: "#/components/responses/ReviewListResponse"
        "400":
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Error"
    post:
      tags:
        - Review
      responses:
        "201":
          description: ""
        "400":
          description: ""
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Error"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Review"
  /reviews/{id}:
    put:
      tags:
        - Review
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          $ref: "#/components/responses/ReviewResponse"
        "400":
          description: ""
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Error"
        "404":
          description: ""
          $ref: "#/components/responses/NotFoundErrorResponse"

      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Review"
    delete:
      tags:
        - Review
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "204":
          description: ""
        "404":
          $ref: "#/components/responses/NotFoundErrorResponse"

components:
  parameters:
    ReviewListQuery:
      name: title
      in: query
      required: false
      schema:
        type: string
  schemas:
    Error:
      type: object
      required:
        - code
        - field
        - message
      properties:
        code:
          type: string
        field:
          type: string
        message:
          type: string
    NotFoundError:
      type: string
      enum:
        - NotFound
      default: NotFound
    UserRole:
      type: string
      enum:
        - ADMIN
        - COMMON
    Me:
      type: object
      required:
        - name
        - userRole
      properties:
        name:
          type: string
          maxLength: 50
          minLength: 1
        userRole:
          $ref: "#/components/schemas/UserRole"
    Review:
      type: object
      required:
        - title
        - content
      properties:
        title:
          type: string
          minLength: 1
          maxLength: 50
        content:
          type: string
          minLength: 1
          maxLength: 100
    WithId:
      type: object
      required:
        - id
      properties:
        id:
          type: string

  responses:
    Me:
      description: ""
      content:
        "application/json":
          schema:
            type: object
            allOf:
              - $ref: "#/components/schemas/Me"
          examples:
            default:
              $ref: "#/components/examples/Me"

    ReviewListResponse:
      description: ""
      content:
        "application/json":
          schema:
            type: array
            items:
              type: object
              required:
                - id
              allOf:
                - $ref: "#/components/schemas/WithId"
                - $ref: "#/components/schemas/Review"
          examples:
            default:
              $ref: "#/components/examples/ReviewListResponse"

    ReviewResponse:
      description: ""
      content:
        "application/json":
          schema:
            type: object
            required:
              - id
            allOf:
              - $ref: "#/components/schemas/WithId"
              - $ref: "#/components/schemas/Review"
          examples:
            default:
              $ref: "#/components/examples/ReviewResponse"

    NotFoundErrorResponse:
      description: ""
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/NotFoundError"

  examples:
    ReviewListResponse:
      value:
        - id: "1"
          title: "title"
          content: "content"

    ReviewResponse:
      value:
        id: "1"
        title: "title"
        content: "content"

    Me:
      value:
        name: "name"
        userRole: "ADMIN"
